package fftw3;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>FFTW3</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface FFTW3Library extends Library {
	public static final String JNA_LIBRARY_NAME = "fftw3";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(FFTW3Library.JNA_LIBRARY_NAME);
	public static final FFTW3Library INSTANCE = (FFTW3Library)Native.loadLibrary(FFTW3Library.JNA_LIBRARY_NAME, FFTW3Library.class);
	/**
	 * <i>native declaration : /usr/local/include/fftw3.h:13</i><br>
	 * enum values
	 */
	/**
	 * <i>native declaration : /usr/local/include/fftw3.h:13</i><br>
	 * enum values
	 */
	public static interface fftw_r2r_kind_do_not_use_me {
		/// <i>native declaration : /usr/local/include/fftw3.h:2</i>
		public static final int FFTW_R2HC = (int)0;
		/// <i>native declaration : /usr/local/include/fftw3.h:3</i>
		public static final int FFTW_HC2R = (int)1;
		/// <i>native declaration : /usr/local/include/fftw3.h:4</i>
		public static final int FFTW_DHT = (int)2;
		/// <i>native declaration : /usr/local/include/fftw3.h:5</i>
		public static final int FFTW_REDFT00 = (int)3;
		/// <i>native declaration : /usr/local/include/fftw3.h:6</i>
		public static final int FFTW_REDFT01 = (int)4;
		/// <i>native declaration : /usr/local/include/fftw3.h:7</i>
		public static final int FFTW_REDFT10 = (int)5;
		/// <i>native declaration : /usr/local/include/fftw3.h:8</i>
		public static final int FFTW_REDFT11 = (int)6;
		/// <i>native declaration : /usr/local/include/fftw3.h:9</i>
		public static final int FFTW_RODFT00 = (int)7;
		/// <i>native declaration : /usr/local/include/fftw3.h:10</i>
		public static final int FFTW_RODFT01 = (int)8;
		/// <i>native declaration : /usr/local/include/fftw3.h:11</i>
		public static final int FFTW_RODFT10 = (int)9;
		/// <i>native declaration : /usr/local/include/fftw3.h:12</i>
		public static final int FFTW_RODFT11 = (int)10;
	};
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_BELIEVE_PCOST = (int)(1 << 8);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_NONTHREADED = (int)(1 << 10);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_FIXED_RADIX_LARGE_N = (int)(1 << 19);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_INDIRECT_OP = (int)(1 << 12);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_BACKWARD = (int)(+1);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_DESTROY_INPUT = (int)(1 << 0);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_FORWARD = (int)(-1);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_MEASURE = (int)(0);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_UNALIGNED = (int)(1 << 1);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_PRESERVE_INPUT = (int)(1 << 4);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_CONSERVE_MEMORY = (int)(1 << 2);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_SLOW = (int)(1 << 18);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_EXHAUSTIVE = (int)(1 << 3);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_SIMD = (int)(1 << 17);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_ESTIMATE = (int)(1 << 6);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_ESTIMATE_PATIENT = (int)(1 << 7);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_VRECURSE = (int)(1 << 16);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_PATIENT = (int)(1 << 5);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_RANK_SPLITS = (int)(1 << 14);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_ALLOW_LARGE_GENERIC = (int)(1 << 13);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_BUFFERING = (int)(1 << 11);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_VRANK_SPLITS = (int)(1 << 15);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_WISDOM_ONLY = (int)(1 << 21);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_ALLOW_PRUNING = (int)(1 << 20);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final int FFTW_NO_DFT_R2HC = (int)(1 << 9);
	/// <i>native declaration : /usr/local/include/fftw3.h</i>
	public static final double FFTW_NO_TIMELIMIT = (double)(-1.0);
	/// <i>native declaration : /usr/local/include/fftw3.h:18</i>
	/// <i>native declaration : /usr/local/include/fftw3.h:18</i>
	public static class fftw_iodim_do_not_use_me extends Structure {
		/// dimension size
		public int n;
		/// input stride
		public int is;
		/// output stride
		public int os;
		public fftw_iodim_do_not_use_me() {
			super();
			initFieldOrder();
		}
		protected void initFieldOrder() {
			setFieldOrder(new String[]{"n", "is", "os"});
		}
		/**
		 * @param n dimension size<br>
		 * @param is input stride<br>
		 * @param os output stride
		 */
		public fftw_iodim_do_not_use_me(int n, int is, int os) {
			super();
			this.n = n;
			this.is = is;
			this.os = os;
			initFieldOrder();
		}
		public static class ByReference extends fftw_iodim_do_not_use_me implements Structure.ByReference {
			
		};
		public static class ByValue extends fftw_iodim_do_not_use_me implements Structure.ByValue {
			
		};
	};
	/// <i>native declaration : /usr/local/include/fftw3.h:23</i>
	/// <i>native declaration : /usr/local/include/fftw3.h:23</i>
	public static class fftw_iodim64_do_not_use_me extends Structure {
		/// dimension size
		public NativeLong n;
		/// input stride
		public NativeLong is;
		/// output stride
		public NativeLong os;
		public fftw_iodim64_do_not_use_me() {
			super();
			initFieldOrder();
		}
		protected void initFieldOrder() {
			setFieldOrder(new String[]{"n", "is", "os"});
		}
		/**
		 * @param n dimension size<br>
		 * @param is input stride<br>
		 * @param os output stride
		 */
		public fftw_iodim64_do_not_use_me(NativeLong n, NativeLong is, NativeLong os) {
			super();
			this.n = n;
			this.is = is;
			this.os = os;
			initFieldOrder();
		}
		public static class ByReference extends fftw_iodim64_do_not_use_me implements Structure.ByReference {
			
		};
		public static class ByValue extends fftw_iodim64_do_not_use_me implements Structure.ByValue {
			
		};
	};
	/// <i>native declaration : /usr/local/include/fftw3.h:24</i>
	/// <i>native declaration : /usr/local/include/fftw3.h:24</i>
	public interface fftw_write_char_func_do_not_use_me extends Callback {
		void apply(byte c, Pointer voidPtr1);
	};
	/// <i>native declaration : /usr/local/include/fftw3.h:25</i>
	/// <i>native declaration : /usr/local/include/fftw3.h:25</i>
	public interface fftw_read_char_func_do_not_use_me extends Callback {
		int apply(Pointer voidPtr1);
	};
	/**
	 * Original signature : <code>void fftw_execute(const fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:35</i>
	 */
	void fftw_execute(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft(int, const int*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:37</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft(int, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_dft(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft(int, const int*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:37</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft(int rank, IntBuffer n, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_1d(int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:39</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_1d(int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_dft_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_1d(int n, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_1d(int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:39</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_1d(int n, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_2d(int, int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:41</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_2d(int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_dft_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_2d(int, int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:41</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_2d(int n0, int n1, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_3d(int, int, int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:43</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_3d(int, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_dft_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_3d(int, int, int, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:43</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:45</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_many_dft(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, int, int)} and {@link #fftw_plan_many_dft(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_many_dft(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:45</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_many_dft(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:47</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_guru_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:47</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:49</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:49</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:51</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_guru64_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:51</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:53</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:53</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>void fftw_execute_dft(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:55</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_dft(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_dft(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_dft(FFTW3Library.fftw_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftw_execute_dft(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:55</i>
	 */
	void fftw_execute_dft(FFTW3Library.fftw_plan p, DoubleBuffer in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftw_execute_split_dft(const fftw_plan, double*, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:57</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_split_dft(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_split_dft(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_split_dft(FFTW3Library.fftw_plan p, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io);
	/**
	 * Original signature : <code>void fftw_execute_split_dft(const fftw_plan, double*, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:57</i>
	 */
	void fftw_execute_split_dft(FFTW3Library.fftw_plan p, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft_r2c(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:59</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_many_dft_r2c(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, int)} and {@link #fftw_plan_many_dft_r2c(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_many_dft_r2c(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft_r2c(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:59</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_many_dft_r2c(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c(int, const int*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:61</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_r2c(int, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_r2c(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_r2c(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c(int, const int*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:61</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_r2c(int rank, IntBuffer n, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_1d(int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:63</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_r2c_1d(int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_r2c_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_1d(int n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_1d(int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:63</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_1d(int n, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_2d(int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:65</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_r2c_2d(int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_r2c_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_2d(int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:65</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_2d(int n0, int n1, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_3d(int, int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:67</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_r2c_3d(int, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_r2c_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_r2c_3d(int, int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:67</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_r2c_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft_c2r(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:69</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_many_dft_c2r(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, int)} and {@link #fftw_plan_many_dft_c2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_many_dft_c2r(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_dft_c2r(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:69</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_many_dft_c2r(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r(int, const int*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:71</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_c2r(int, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_c2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_c2r(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r(int, const int*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:71</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_c2r(int rank, IntBuffer n, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_1d(int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:73</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_c2r_1d(int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_c2r_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_1d(int n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_1d(int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:73</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_1d(int n, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_2d(int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:75</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_c2r_2d(int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_c2r_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_2d(int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:75</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_2d(int n0, int n1, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_3d(int, int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:77</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_dft_c2r_3d(int, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_dft_c2r_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_dft_c2r_3d(int, int, int, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:77</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_dft_c2r_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft_r2c(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:79</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft_r2c(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:79</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft_c2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:81</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_dft_c2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:81</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft_r2c(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:83</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft_r2c(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:83</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft_c2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:85</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_split_dft_c2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:85</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft_r2c(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:87</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft_r2c(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:87</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft_c2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:89</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_dft_c2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:89</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft_r2c(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:91</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft_r2c(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:91</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft_c2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:93</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftw_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_split_dft_c2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:93</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>void fftw_execute_dft_r2c(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:95</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_dft_r2c(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_dft_r2c(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_dft_r2c(FFTW3Library.fftw_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftw_execute_dft_r2c(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:95</i>
	 */
	void fftw_execute_dft_r2c(FFTW3Library.fftw_plan p, DoubleBuffer in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftw_execute_dft_c2r(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:97</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_dft_c2r(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_dft_c2r(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_dft_c2r(FFTW3Library.fftw_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftw_execute_dft_c2r(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:97</i>
	 */
	void fftw_execute_dft_c2r(FFTW3Library.fftw_plan p, DoubleBuffer in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftw_execute_split_dft_r2c(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:99</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_split_dft_r2c(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_split_dft_r2c(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_split_dft_r2c(FFTW3Library.fftw_plan p, DoubleByReference in, DoubleByReference ro, DoubleByReference io);
	/**
	 * Original signature : <code>void fftw_execute_split_dft_r2c(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:99</i>
	 */
	void fftw_execute_split_dft_r2c(FFTW3Library.fftw_plan p, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io);
	/**
	 * Original signature : <code>void fftw_execute_split_dft_c2r(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:101</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_split_dft_c2r(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_split_dft_c2r(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_split_dft_c2r(FFTW3Library.fftw_plan p, DoubleByReference ri, DoubleByReference ii, DoubleByReference out);
	/**
	 * Original signature : <code>void fftw_execute_split_dft_c2r(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:101</i>
	 */
	void fftw_execute_split_dft_c2r(FFTW3Library.fftw_plan p, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_r2r(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:103</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_many_r2r(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.IntBuffer, int)} and {@link #fftw_plan_many_r2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_many_r2r(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_many_r2r(int, const int*, int, double*, const int*, int, int, double*, const int*, int, int, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:103</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_many_r2r(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r(int, const int*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:105</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_r2r(int, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftw_plan_r2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_r2r(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r(int, const int*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:105</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_r2r(int rank, IntBuffer n, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_1d(int, double*, double*, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:107</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_r2r_1d(int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftw_plan_r2r_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_r2r_1d(int n, DoubleByReference in, DoubleByReference out, int kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_1d(int, double*, double*, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:107</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_r2r_1d(int n, DoubleBuffer in, DoubleBuffer out, int kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_2d(int, int, double*, double*, fftw_r2r_kind, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:109</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_r2r_2d(int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int, int)} and {@link #fftw_plan_r2r_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_r2r_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_2d(int, int, double*, double*, fftw_r2r_kind, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:109</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_r2r_2d(int n0, int n1, DoubleBuffer in, DoubleBuffer out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_3d(int, int, int, double*, double*, fftw_r2r_kind, fftw_r2r_kind, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:111</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_r2r_3d(int, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int, int, int)} and {@link #fftw_plan_r2r_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_r2r_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_r2r_3d(int, int, int, double*, double*, fftw_r2r_kind, fftw_r2r_kind, fftw_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:111</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_r2r_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleBuffer out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_r2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:113</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftw_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru_r2r(int, const fftw_iodim*, int, const fftw_iodim*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:113</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_r2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:115</i><br>
	 * @deprecated use the safer methods {@link #fftw_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftw_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftw_plan fftw_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftw_plan fftw_plan_guru64_r2r(int, const fftw_iodim64*, int, const fftw_iodim64*, double*, double*, const fftw_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:115</i>
	 */
	FFTW3Library.fftw_plan fftw_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>void fftw_execute_r2r(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:117</i><br>
	 * @deprecated use the safer methods {@link #fftw_execute_r2r(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_execute_r2r(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_execute_r2r(FFTW3Library.fftw_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftw_execute_r2r(const fftw_plan, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:117</i>
	 */
	void fftw_execute_r2r(FFTW3Library.fftw_plan p, DoubleBuffer in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftw_destroy_plan(fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:119</i>
	 */
	void fftw_destroy_plan(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>void fftw_forget_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:121</i>
	 */
	void fftw_forget_wisdom();
	/**
	 * Original signature : <code>void fftw_cleanup()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:123</i>
	 */
	void fftw_cleanup();
	/**
	 * Original signature : <code>void fftw_set_timelimit(double)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:125</i>
	 */
	void fftw_set_timelimit(double t);
	/**
	 * Original signature : <code>void fftw_plan_with_nthreads(int)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:127</i>
	 */
	void fftw_plan_with_nthreads(int nthreads);
	/**
	 * Original signature : <code>int fftw_init_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:129</i>
	 */
	int fftw_init_threads();
	/**
	 * Original signature : <code>void fftw_cleanup_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:131</i>
	 */
	void fftw_cleanup_threads();
	/**
	 * Original signature : <code>int fftw_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:133</i><br>
	 * @deprecated use the safer methods {@link #fftw_export_wisdom_to_filename(java.lang.String)} and {@link #fftw_export_wisdom_to_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftw_export_wisdom_to_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftw_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:133</i>
	 */
	int fftw_export_wisdom_to_filename(String filename);
	/**
	 * Original signature : <code>void fftw_export_wisdom_to_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:135</i>
	 */
	void fftw_export_wisdom_to_file(FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>char* fftw_export_wisdom_to_string()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:137</i>
	 */
	Pointer fftw_export_wisdom_to_string();
	/**
	 * Original signature : <code>void fftw_export_wisdom(fftw_write_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:139</i>
	 */
	void fftw_export_wisdom(FFTW3Library.fftw_write_char_func_do_not_use_me write_char, Pointer data);
	/**
	 * Original signature : <code>int fftw_import_system_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:141</i>
	 */
	int fftw_import_system_wisdom();
	/**
	 * Original signature : <code>int fftw_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:143</i><br>
	 * @deprecated use the safer methods {@link #fftw_import_wisdom_from_filename(java.lang.String)} and {@link #fftw_import_wisdom_from_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftw_import_wisdom_from_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftw_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:143</i>
	 */
	int fftw_import_wisdom_from_filename(String filename);
	/**
	 * Original signature : <code>int fftw_import_wisdom_from_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:145</i>
	 */
	int fftw_import_wisdom_from_file(FFTW3Library.FILE input_file);
	/**
	 * Original signature : <code>int fftw_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:147</i><br>
	 * @deprecated use the safer methods {@link #fftw_import_wisdom_from_string(java.lang.String)} and {@link #fftw_import_wisdom_from_string(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftw_import_wisdom_from_string(Pointer input_string);
	/**
	 * Original signature : <code>int fftw_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:147</i>
	 */
	int fftw_import_wisdom_from_string(String input_string);
	/**
	 * Original signature : <code>int fftw_import_wisdom(fftw_read_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:149</i>
	 */
	int fftw_import_wisdom(FFTW3Library.fftw_read_char_func_do_not_use_me read_char, Pointer data);
	/**
	 * Original signature : <code>void fftw_fprint_plan(const fftw_plan, FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:151</i>
	 */
	void fftw_fprint_plan(FFTW3Library.fftw_plan p, FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>void fftw_print_plan(const fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:153</i>
	 */
	void fftw_print_plan(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>char* fftw_sprint_plan(const fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:155</i>
	 */
	Pointer fftw_sprint_plan(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>void* fftw_malloc(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:157</i>
	 */
	Pointer fftw_malloc(NativeLong n);
	/**
	 * Original signature : <code>double* fftw_alloc_real(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:159</i>
	 */
	DoubleByReference fftw_alloc_real(NativeLong n);
	/**
	 * Original signature : <code>double* fftw_alloc_complex(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:161</i>
	 */
	DoubleByReference fftw_alloc_complex(NativeLong n);
	/**
	 * Original signature : <code>void fftw_free(void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:163</i>
	 */
	void fftw_free(Pointer p);
	/**
	 * Original signature : <code>void fftw_flops(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:165</i><br>
	 * @deprecated use the safer methods {@link #fftw_flops(fftw3.FFTW3Library.fftw_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftw_flops(fftw3.FFTW3Library.fftw_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftw_flops(FFTW3Library.fftw_plan p, DoubleByReference add, DoubleByReference mul, DoubleByReference fmas);
	/**
	 * Original signature : <code>void fftw_flops(const fftw_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:165</i>
	 */
	void fftw_flops(FFTW3Library.fftw_plan p, DoubleBuffer add, DoubleBuffer mul, DoubleBuffer fmas);
	/**
	 * Original signature : <code>double fftw_estimate_cost(const fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:167</i>
	 */
	double fftw_estimate_cost(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>double fftw_cost(const fftw_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:169</i>
	 */
	double fftw_cost(FFTW3Library.fftw_plan p);
	/**
	 * Original signature : <code>int fftw_alignment_of(double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:171</i><br>
	 * @deprecated use the safer methods {@link #fftw_alignment_of(java.nio.DoubleBuffer)} and {@link #fftw_alignment_of(com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int fftw_alignment_of(DoubleByReference p);
	/**
	 * Original signature : <code>int fftw_alignment_of(double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:171</i>
	 */
	int fftw_alignment_of(DoubleBuffer p);
	/**
	 * Original signature : <code>void fftwf_execute(const fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:184</i>
	 */
	void fftwf_execute(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft(int, const int*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:186</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft(int, java.nio.IntBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_dft(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft(int rank, IntByReference n, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft(int, const int*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:186</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft(int rank, IntBuffer n, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_1d(int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:188</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_1d(int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_dft_1d(int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_1d(int n, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_1d(int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:188</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_1d(int n, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_2d(int, int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:190</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_2d(int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_dft_2d(int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_2d(int n0, int n1, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_2d(int, int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:190</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_2d(int n0, int n1, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_3d(int, int, int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:192</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_3d(int, int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_dft_3d(int, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_3d(int n0, int n1, int n2, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_3d(int, int, int, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:192</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_3d(int n0, int n1, int n2, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:194</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_many_dft(int, java.nio.IntBuffer, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, int, int)} and {@link #fftwf_plan_many_dft(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_many_dft(int rank, IntByReference n, int howmany, FloatByReference in, IntByReference inembed, int istride, int idist, FloatByReference out, IntByReference onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:194</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_many_dft(int rank, IntBuffer n, int howmany, FloatBuffer in, IntBuffer inembed, int istride, int idist, FloatBuffer out, IntBuffer onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:196</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_guru_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:196</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:198</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference ri, FloatByReference ii, FloatByReference ro, FloatByReference io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:198</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer ri, FloatBuffer ii, FloatBuffer ro, FloatBuffer io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:200</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_guru64_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:200</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int sign, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:202</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference ri, FloatByReference ii, FloatByReference ro, FloatByReference io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:202</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer ri, FloatBuffer ii, FloatBuffer ro, FloatBuffer io, int flags);
	/**
	 * Original signature : <code>void fftwf_execute_dft(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:204</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_dft(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_dft(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_dft(FFTW3Library.fftwf_plan p, FloatByReference in, FloatByReference out);
	/**
	 * Original signature : <code>void fftwf_execute_dft(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:204</i>
	 */
	void fftwf_execute_dft(FFTW3Library.fftwf_plan p, FloatBuffer in, FloatBuffer out);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft(const fftwf_plan, float*, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:206</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_split_dft(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_split_dft(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_split_dft(FFTW3Library.fftwf_plan p, FloatByReference ri, FloatByReference ii, FloatByReference ro, FloatByReference io);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft(const fftwf_plan, float*, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:206</i>
	 */
	void fftwf_execute_split_dft(FFTW3Library.fftwf_plan p, FloatBuffer ri, FloatBuffer ii, FloatBuffer ro, FloatBuffer io);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft_r2c(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:208</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_many_dft_r2c(int, java.nio.IntBuffer, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, int)} and {@link #fftwf_plan_many_dft_r2c(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_many_dft_r2c(int rank, IntByReference n, int howmany, FloatByReference in, IntByReference inembed, int istride, int idist, FloatByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft_r2c(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:208</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_many_dft_r2c(int rank, IntBuffer n, int howmany, FloatBuffer in, IntBuffer inembed, int istride, int idist, FloatBuffer out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c(int, const int*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:210</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_r2c(int, java.nio.IntBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_r2c(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c(int rank, IntByReference n, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c(int, const int*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:210</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c(int rank, IntBuffer n, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_1d(int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:212</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_r2c_1d(int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_r2c_1d(int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_1d(int n, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_1d(int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:212</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_1d(int n, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_2d(int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:214</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_r2c_2d(int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_r2c_2d(int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_2d(int n0, int n1, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_2d(int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:214</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_2d(int n0, int n1, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_3d(int, int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:216</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_r2c_3d(int, int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_r2c_3d(int, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_3d(int n0, int n1, int n2, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_r2c_3d(int, int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:216</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_r2c_3d(int n0, int n1, int n2, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft_c2r(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:218</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_many_dft_c2r(int, java.nio.IntBuffer, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, int)} and {@link #fftwf_plan_many_dft_c2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_many_dft_c2r(int rank, IntByReference n, int howmany, FloatByReference in, IntByReference inembed, int istride, int idist, FloatByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_dft_c2r(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:218</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_many_dft_c2r(int rank, IntBuffer n, int howmany, FloatBuffer in, IntBuffer inembed, int istride, int idist, FloatBuffer out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r(int, const int*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:220</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_c2r(int, java.nio.IntBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_c2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r(int rank, IntByReference n, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r(int, const int*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:220</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r(int rank, IntBuffer n, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_1d(int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:222</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_c2r_1d(int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_c2r_1d(int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_1d(int n, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_1d(int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:222</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_1d(int n, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_2d(int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:224</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_c2r_2d(int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_c2r_2d(int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_2d(int n0, int n1, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_2d(int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:224</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_2d(int n0, int n1, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_3d(int, int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:226</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_dft_c2r_3d(int, int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_dft_c2r_3d(int, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_3d(int n0, int n1, int n2, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_dft_c2r_3d(int, int, int, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:226</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_dft_c2r_3d(int n0, int n1, int n2, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft_r2c(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:228</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft_r2c(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:228</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft_c2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:230</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_dft_c2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:230</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft_r2c(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:232</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference in, FloatByReference ro, FloatByReference io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft_r2c(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:232</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer ro, FloatBuffer io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft_c2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:234</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference ri, FloatByReference ii, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_split_dft_c2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:234</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer ri, FloatBuffer ii, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft_r2c(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:236</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft_r2c(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:236</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft_c2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:238</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_dft_c2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:238</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft_r2c(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:240</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference in, FloatByReference ro, FloatByReference io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft_r2c(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:240</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer ro, FloatBuffer io, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft_c2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:242</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, int)} and {@link #fftwf_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference ri, FloatByReference ii, FloatByReference out, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_split_dft_c2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, float*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:242</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer ri, FloatBuffer ii, FloatBuffer out, int flags);
	/**
	 * Original signature : <code>void fftwf_execute_dft_r2c(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:244</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_dft_r2c(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_dft_r2c(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_dft_r2c(FFTW3Library.fftwf_plan p, FloatByReference in, FloatByReference out);
	/**
	 * Original signature : <code>void fftwf_execute_dft_r2c(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:244</i>
	 */
	void fftwf_execute_dft_r2c(FFTW3Library.fftwf_plan p, FloatBuffer in, FloatBuffer out);
	/**
	 * Original signature : <code>void fftwf_execute_dft_c2r(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:246</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_dft_c2r(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_dft_c2r(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_dft_c2r(FFTW3Library.fftwf_plan p, FloatByReference in, FloatByReference out);
	/**
	 * Original signature : <code>void fftwf_execute_dft_c2r(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:246</i>
	 */
	void fftwf_execute_dft_c2r(FFTW3Library.fftwf_plan p, FloatBuffer in, FloatBuffer out);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft_r2c(const fftwf_plan, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:248</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_split_dft_r2c(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_split_dft_r2c(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_split_dft_r2c(FFTW3Library.fftwf_plan p, FloatByReference in, FloatByReference ro, FloatByReference io);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft_r2c(const fftwf_plan, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:248</i>
	 */
	void fftwf_execute_split_dft_r2c(FFTW3Library.fftwf_plan p, FloatBuffer in, FloatBuffer ro, FloatBuffer io);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft_c2r(const fftwf_plan, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:250</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_split_dft_c2r(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_split_dft_c2r(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_split_dft_c2r(FFTW3Library.fftwf_plan p, FloatByReference ri, FloatByReference ii, FloatByReference out);
	/**
	 * Original signature : <code>void fftwf_execute_split_dft_c2r(const fftwf_plan, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:250</i>
	 */
	void fftwf_execute_split_dft_c2r(FFTW3Library.fftwf_plan p, FloatBuffer ri, FloatBuffer ii, FloatBuffer out);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_r2r(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:252</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_many_r2r(int, java.nio.IntBuffer, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, java.nio.FloatBuffer, java.nio.IntBuffer, int, int, java.nio.IntBuffer, int)} and {@link #fftwf_plan_many_r2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_many_r2r(int rank, IntByReference n, int howmany, FloatByReference in, IntByReference inembed, int istride, int idist, FloatByReference out, IntByReference onembed, int ostride, int odist, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_many_r2r(int, const int*, int, float*, const int*, int, int, float*, const int*, int, int, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:252</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_many_r2r(int rank, IntBuffer n, int howmany, FloatBuffer in, IntBuffer inembed, int istride, int idist, FloatBuffer out, IntBuffer onembed, int ostride, int odist, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r(int, const int*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:254</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_r2r(int, java.nio.IntBuffer, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, int)} and {@link #fftwf_plan_r2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_r2r(int rank, IntByReference n, FloatByReference in, FloatByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r(int, const int*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:254</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_r2r(int rank, IntBuffer n, FloatBuffer in, FloatBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_1d(int, float*, float*, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:256</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_r2r_1d(int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int)} and {@link #fftwf_plan_r2r_1d(int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_r2r_1d(int n, FloatByReference in, FloatByReference out, int kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_1d(int, float*, float*, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:256</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_r2r_1d(int n, FloatBuffer in, FloatBuffer out, int kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_2d(int, int, float*, float*, fftwf_r2r_kind, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:258</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_r2r_2d(int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int, int)} and {@link #fftwf_plan_r2r_2d(int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_r2r_2d(int n0, int n1, FloatByReference in, FloatByReference out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_2d(int, int, float*, float*, fftwf_r2r_kind, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:258</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_r2r_2d(int n0, int n1, FloatBuffer in, FloatBuffer out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_3d(int, int, int, float*, float*, fftwf_r2r_kind, fftwf_r2r_kind, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:260</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_r2r_3d(int, int, int, java.nio.FloatBuffer, java.nio.FloatBuffer, int, int, int, int)} and {@link #fftwf_plan_r2r_3d(int, int, int, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_r2r_3d(int n0, int n1, int n2, FloatByReference in, FloatByReference out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_r2r_3d(int, int, int, float*, float*, fftwf_r2r_kind, fftwf_r2r_kind, fftwf_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:260</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_r2r_3d(int n0, int n1, int n2, FloatBuffer in, FloatBuffer out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_r2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:262</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, int)} and {@link #fftwf_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru_r2r(int, const fftwf_iodim*, int, const fftwf_iodim*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:262</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_r2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:264</i><br>
	 * @deprecated use the safer methods {@link #fftwf_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.FloatBuffer, java.nio.FloatBuffer, java.nio.IntBuffer, int)} and {@link #fftwf_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwf_plan fftwf_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatByReference in, FloatByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwf_plan fftwf_plan_guru64_r2r(int, const fftwf_iodim64*, int, const fftwf_iodim64*, float*, float*, const fftwf_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:264</i>
	 */
	FFTW3Library.fftwf_plan fftwf_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, FloatBuffer in, FloatBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>void fftwf_execute_r2r(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:266</i><br>
	 * @deprecated use the safer methods {@link #fftwf_execute_r2r(fftw3.FFTW3Library.fftwf_plan, java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #fftwf_execute_r2r(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	void fftwf_execute_r2r(FFTW3Library.fftwf_plan p, FloatByReference in, FloatByReference out);
	/**
	 * Original signature : <code>void fftwf_execute_r2r(const fftwf_plan, float*, float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:266</i>
	 */
	void fftwf_execute_r2r(FFTW3Library.fftwf_plan p, FloatBuffer in, FloatBuffer out);
	/**
	 * Original signature : <code>void fftwf_destroy_plan(fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:268</i>
	 */
	void fftwf_destroy_plan(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>void fftwf_forget_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:270</i>
	 */
	void fftwf_forget_wisdom();
	/**
	 * Original signature : <code>void fftwf_cleanup()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:272</i>
	 */
	void fftwf_cleanup();
	/**
	 * Original signature : <code>void fftwf_set_timelimit(double)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:274</i>
	 */
	void fftwf_set_timelimit(double t);
	/**
	 * Original signature : <code>void fftwf_plan_with_nthreads(int)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:276</i>
	 */
	void fftwf_plan_with_nthreads(int nthreads);
	/**
	 * Original signature : <code>int fftwf_init_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:278</i>
	 */
	int fftwf_init_threads();
	/**
	 * Original signature : <code>void fftwf_cleanup_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:280</i>
	 */
	void fftwf_cleanup_threads();
	/**
	 * Original signature : <code>int fftwf_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:282</i><br>
	 * @deprecated use the safer methods {@link #fftwf_export_wisdom_to_filename(java.lang.String)} and {@link #fftwf_export_wisdom_to_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwf_export_wisdom_to_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftwf_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:282</i>
	 */
	int fftwf_export_wisdom_to_filename(String filename);
	/**
	 * Original signature : <code>void fftwf_export_wisdom_to_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:284</i>
	 */
	void fftwf_export_wisdom_to_file(FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>char* fftwf_export_wisdom_to_string()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:286</i>
	 */
	Pointer fftwf_export_wisdom_to_string();
	/**
	 * Original signature : <code>void fftwf_export_wisdom(fftwf_write_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:288</i>
	 */
	void fftwf_export_wisdom(FFTW3Library.fftw_write_char_func_do_not_use_me write_char, Pointer data);
	/**
	 * Original signature : <code>int fftwf_import_system_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:290</i>
	 */
	int fftwf_import_system_wisdom();
	/**
	 * Original signature : <code>int fftwf_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:292</i><br>
	 * @deprecated use the safer methods {@link #fftwf_import_wisdom_from_filename(java.lang.String)} and {@link #fftwf_import_wisdom_from_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwf_import_wisdom_from_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftwf_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:292</i>
	 */
	int fftwf_import_wisdom_from_filename(String filename);
	/**
	 * Original signature : <code>int fftwf_import_wisdom_from_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:294</i>
	 */
	int fftwf_import_wisdom_from_file(FFTW3Library.FILE input_file);
	/**
	 * Original signature : <code>int fftwf_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:296</i><br>
	 * @deprecated use the safer methods {@link #fftwf_import_wisdom_from_string(java.lang.String)} and {@link #fftwf_import_wisdom_from_string(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwf_import_wisdom_from_string(Pointer input_string);
	/**
	 * Original signature : <code>int fftwf_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:296</i>
	 */
	int fftwf_import_wisdom_from_string(String input_string);
	/**
	 * Original signature : <code>int fftwf_import_wisdom(fftwf_read_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:298</i>
	 */
	int fftwf_import_wisdom(FFTW3Library.fftw_read_char_func_do_not_use_me read_char, Pointer data);
	/**
	 * Original signature : <code>void fftwf_fprint_plan(const fftwf_plan, FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:300</i>
	 */
	void fftwf_fprint_plan(FFTW3Library.fftwf_plan p, FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>void fftwf_print_plan(const fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:302</i>
	 */
	void fftwf_print_plan(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>char* fftwf_sprint_plan(const fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:304</i>
	 */
	Pointer fftwf_sprint_plan(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>void* fftwf_malloc(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:306</i>
	 */
	Pointer fftwf_malloc(NativeLong n);
	/**
	 * Original signature : <code>float* fftwf_alloc_real(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:308</i>
	 */
	FloatByReference fftwf_alloc_real(NativeLong n);
	/**
	 * Original signature : <code>float* fftwf_alloc_complex(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:310</i>
	 */
	FloatByReference fftwf_alloc_complex(NativeLong n);
	/**
	 * Original signature : <code>void fftwf_free(void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:312</i>
	 */
	void fftwf_free(Pointer p);
	/**
	 * Original signature : <code>void fftwf_flops(const fftwf_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:314</i><br>
	 * @deprecated use the safer methods {@link #fftwf_flops(fftw3.FFTW3Library.fftwf_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwf_flops(fftw3.FFTW3Library.fftwf_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwf_flops(FFTW3Library.fftwf_plan p, DoubleByReference add, DoubleByReference mul, DoubleByReference fmas);
	/**
	 * Original signature : <code>void fftwf_flops(const fftwf_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:314</i>
	 */
	void fftwf_flops(FFTW3Library.fftwf_plan p, DoubleBuffer add, DoubleBuffer mul, DoubleBuffer fmas);
	/**
	 * Original signature : <code>double fftwf_estimate_cost(const fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:316</i>
	 */
	double fftwf_estimate_cost(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>double fftwf_cost(const fftwf_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:318</i>
	 */
	double fftwf_cost(FFTW3Library.fftwf_plan p);
	/**
	 * Original signature : <code>int fftwf_alignment_of(float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:320</i><br>
	 * @deprecated use the safer methods {@link #fftwf_alignment_of(java.nio.FloatBuffer)} and {@link #fftwf_alignment_of(com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	int fftwf_alignment_of(FloatByReference p);
	/**
	 * Original signature : <code>int fftwf_alignment_of(float*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:320</i>
	 */
	int fftwf_alignment_of(FloatBuffer p);
	/**
	 * Original signature : <code>void fftwl_execute(const fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:333</i>
	 */
	void fftwl_execute(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft(int, const int*, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:335</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft(int, java.nio.IntBuffer, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} and {@link #fftwl_plan_dft(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft(int, const int*, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:335</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft(int rank, IntBuffer n, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_1d(int, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:337</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_1d(int n, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_2d(int, int, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:339</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_3d(int, int, int, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:341</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft(int, const int*, int, fftwl_complex*, const int*, int, int, fftwl_complex*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:343</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_many_dft(int, java.nio.IntBuffer, int, com.sun.jna.ptr.DoubleByReference, java.nio.IntBuffer, int, int, com.sun.jna.ptr.DoubleByReference, java.nio.IntBuffer, int, int, int, int)} and {@link #fftwl_plan_many_dft(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_many_dft(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft(int, const int*, int, fftwl_complex*, const int*, int, int, fftwl_complex*, const int*, int, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:343</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_many_dft(int rank, IntBuffer n, int howmany, DoubleByReference in, IntBuffer inembed, int istride, int idist, DoubleByReference out, IntBuffer onembed, int ostride, int odist, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_dft(int, const fftwl_iodim*, int, const fftwl_iodim*, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:345</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:347</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru_split_dft(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:347</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_dft(int, const fftwl_iodim64*, int, const fftwl_iodim64*, fftwl_complex*, fftwl_complex*, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:349</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int sign, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:351</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru64_split_dft(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:351</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>void fftwl_execute_dft(const fftwl_plan, fftwl_complex*, fftwl_complex*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:353</i>
	 */
	void fftwl_execute_dft(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft(const fftwl_plan, long double*, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:355</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_split_dft(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwl_execute_split_dft(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_split_dft(FFTW3Library.fftwl_plan p, DoubleByReference ri, DoubleByReference ii, DoubleByReference ro, DoubleByReference io);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft(const fftwl_plan, long double*, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:355</i>
	 */
	void fftwl_execute_split_dft(FFTW3Library.fftwl_plan p, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer ro, DoubleBuffer io);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft_r2c(int, const int*, int, long double*, const int*, int, int, fftwl_complex*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:357</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_many_dft_r2c(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, com.sun.jna.ptr.DoubleByReference, java.nio.IntBuffer, int, int, int)} and {@link #fftwl_plan_many_dft_r2c(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_many_dft_r2c(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft_r2c(int, const int*, int, long double*, const int*, int, int, fftwl_complex*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:357</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_many_dft_r2c(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleByReference out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c(int, const int*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:359</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_r2c(int, java.nio.IntBuffer, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_dft_r2c(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c(int, const int*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:359</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c(int rank, IntBuffer n, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_1d(int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:361</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_r2c_1d(int, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_dft_r2c_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_1d(int n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_1d(int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:361</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_1d(int n, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_2d(int, int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:363</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_r2c_2d(int, int, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_dft_r2c_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_2d(int, int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:363</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_2d(int n0, int n1, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_3d(int, int, int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:365</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_r2c_3d(int, int, int, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_dft_r2c_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_r2c_3d(int, int, int, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:365</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_r2c_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft_c2r(int, const int*, int, fftwl_complex*, const int*, int, int, long double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:367</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_many_dft_c2r(int, java.nio.IntBuffer, int, com.sun.jna.ptr.DoubleByReference, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, int)} and {@link #fftwl_plan_many_dft_c2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_many_dft_c2r(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_dft_c2r(int, const int*, int, fftwl_complex*, const int*, int, int, long double*, const int*, int, int, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:367</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_many_dft_c2r(int rank, IntBuffer n, int howmany, DoubleByReference in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r(int, const int*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:369</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_c2r(int, java.nio.IntBuffer, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_dft_c2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r(int, const int*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:369</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r(int rank, IntBuffer n, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_1d(int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:371</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_c2r_1d(int, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_dft_c2r_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_1d(int n, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_1d(int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:371</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_1d(int n, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_2d(int, int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:373</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_c2r_2d(int, int, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_dft_c2r_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_2d(int, int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:373</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_2d(int n0, int n1, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_3d(int, int, int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:375</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_dft_c2r_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_dft_c2r_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_dft_c2r_3d(int, int, int, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:375</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_dft_c2r_3d(int n0, int n1, int n2, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_dft_r2c(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:377</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_guru_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_dft_r2c(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:377</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_dft_c2r(int, const fftwl_iodim*, int, const fftwl_iodim*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:379</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_dft_c2r(int, const fftwl_iodim*, int, const fftwl_iodim*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:379</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft_r2c(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:381</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft_r2c(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:381</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft_r2c(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft_c2r(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:383</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_split_dft_c2r(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:383</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_split_dft_c2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_dft_r2c(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:385</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference, int)} and {@link #fftwl_plan_guru64_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_dft_r2c(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, fftwl_complex*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:385</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_dft_c2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:387</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru64_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_dft_c2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, fftwl_complex*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:387</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft_r2c(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:389</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru64_split_dft_r2c(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference ro, DoubleByReference io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft_r2c(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:389</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft_r2c(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft_c2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:391</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int)} and {@link #fftwl_plan_guru64_split_dft_c2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference ri, DoubleByReference ii, DoubleByReference out, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_split_dft_c2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, long double*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:391</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_split_dft_c2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out, int flags);
	/**
	 * Original signature : <code>void fftwl_execute_dft_r2c(const fftwl_plan, long double*, fftwl_complex*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:393</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_dft_r2c(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, com.sun.jna.ptr.DoubleByReference)} and {@link #fftwl_execute_dft_r2c(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_dft_r2c(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_dft_r2c(const fftwl_plan, long double*, fftwl_complex*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:393</i>
	 */
	void fftwl_execute_dft_r2c(FFTW3Library.fftwl_plan p, DoubleBuffer in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_dft_c2r(const fftwl_plan, fftwl_complex*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:395</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_dft_c2r(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, java.nio.DoubleBuffer)} and {@link #fftwl_execute_dft_c2r(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_dft_c2r(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_dft_c2r(const fftwl_plan, fftwl_complex*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:395</i>
	 */
	void fftwl_execute_dft_c2r(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft_r2c(const fftwl_plan, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:397</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_split_dft_r2c(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwl_execute_split_dft_r2c(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_split_dft_r2c(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleByReference ro, DoubleByReference io);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft_r2c(const fftwl_plan, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:397</i>
	 */
	void fftwl_execute_split_dft_r2c(FFTW3Library.fftwl_plan p, DoubleBuffer in, DoubleBuffer ro, DoubleBuffer io);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft_c2r(const fftwl_plan, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:399</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_split_dft_c2r(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwl_execute_split_dft_c2r(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_split_dft_c2r(FFTW3Library.fftwl_plan p, DoubleByReference ri, DoubleByReference ii, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_split_dft_c2r(const fftwl_plan, long double*, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:399</i>
	 */
	void fftwl_execute_split_dft_c2r(FFTW3Library.fftwl_plan p, DoubleBuffer ri, DoubleBuffer ii, DoubleBuffer out);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_r2r(int, const int*, int, long double*, const int*, int, int, long double*, const int*, int, int, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:401</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_many_r2r(int, java.nio.IntBuffer, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.DoubleBuffer, java.nio.IntBuffer, int, int, java.nio.IntBuffer, int)} and {@link #fftwl_plan_many_r2r(int, com.sun.jna.ptr.IntByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_many_r2r(int rank, IntByReference n, int howmany, DoubleByReference in, IntByReference inembed, int istride, int idist, DoubleByReference out, IntByReference onembed, int ostride, int odist, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_many_r2r(int, const int*, int, long double*, const int*, int, int, long double*, const int*, int, int, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:401</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_many_r2r(int rank, IntBuffer n, int howmany, DoubleBuffer in, IntBuffer inembed, int istride, int idist, DoubleBuffer out, IntBuffer onembed, int ostride, int odist, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r(int, const int*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:403</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_r2r(int, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftwl_plan_r2r(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_r2r(int rank, IntByReference n, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r(int, const int*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:403</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_r2r(int rank, IntBuffer n, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_1d(int, long double*, long double*, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:405</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_r2r_1d(int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int)} and {@link #fftwl_plan_r2r_1d(int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_r2r_1d(int n, DoubleByReference in, DoubleByReference out, int kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_1d(int, long double*, long double*, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:405</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_r2r_1d(int n, DoubleBuffer in, DoubleBuffer out, int kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_2d(int, int, long double*, long double*, fftwl_r2r_kind, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:407</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_r2r_2d(int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int, int)} and {@link #fftwl_plan_r2r_2d(int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_r2r_2d(int n0, int n1, DoubleByReference in, DoubleByReference out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_2d(int, int, long double*, long double*, fftwl_r2r_kind, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:407</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_r2r_2d(int n0, int n1, DoubleBuffer in, DoubleBuffer out, int kind0, int kind1, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_3d(int, int, int, long double*, long double*, fftwl_r2r_kind, fftwl_r2r_kind, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:409</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_r2r_3d(int, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, int, int, int, int)} and {@link #fftwl_plan_r2r_3d(int, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_r2r_3d(int n0, int n1, int n2, DoubleByReference in, DoubleByReference out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_r2r_3d(int, int, int, long double*, long double*, fftwl_r2r_kind, fftwl_r2r_kind, fftwl_r2r_kind, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:409</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_r2r_3d(int n0, int n1, int n2, DoubleBuffer in, DoubleBuffer out, int kind0, int kind1, int kind2, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_r2r(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:411</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftwl_plan_guru_r2r(int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru_r2r(int, const fftwl_iodim*, int, const fftwl_iodim*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:411</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru_r2r(int rank, FFTW3Library.fftw_iodim_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_r2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:413</i><br>
	 * @deprecated use the safer methods {@link #fftwl_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.IntBuffer, int)} and {@link #fftwl_plan_guru64_r2r(int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, int, fftw3.FFTW3Library.fftw_iodim64_do_not_use_me, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	FFTW3Library.fftwl_plan fftwl_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleByReference in, DoubleByReference out, IntByReference kind, int flags);
	/**
	 * Original signature : <code>fftwl_plan fftwl_plan_guru64_r2r(int, const fftwl_iodim64*, int, const fftwl_iodim64*, long double*, long double*, const fftwl_r2r_kind*, unsigned)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:413</i>
	 */
	FFTW3Library.fftwl_plan fftwl_plan_guru64_r2r(int rank, FFTW3Library.fftw_iodim64_do_not_use_me dims, int howmany_rank, FFTW3Library.fftw_iodim64_do_not_use_me howmany_dims, DoubleBuffer in, DoubleBuffer out, IntBuffer kind, int flags);
	/**
	 * Original signature : <code>void fftwl_execute_r2r(const fftwl_plan, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:415</i><br>
	 * @deprecated use the safer methods {@link #fftwl_execute_r2r(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwl_execute_r2r(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_execute_r2r(FFTW3Library.fftwl_plan p, DoubleByReference in, DoubleByReference out);
	/**
	 * Original signature : <code>void fftwl_execute_r2r(const fftwl_plan, long double*, long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:415</i>
	 */
	void fftwl_execute_r2r(FFTW3Library.fftwl_plan p, DoubleBuffer in, DoubleBuffer out);
	/**
	 * Original signature : <code>void fftwl_destroy_plan(fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:417</i>
	 */
	void fftwl_destroy_plan(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>void fftwl_forget_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:419</i>
	 */
	void fftwl_forget_wisdom();
	/**
	 * Original signature : <code>void fftwl_cleanup()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:421</i>
	 */
	void fftwl_cleanup();
	/**
	 * Original signature : <code>void fftwl_set_timelimit(double)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:423</i>
	 */
	void fftwl_set_timelimit(double t);
	/**
	 * Original signature : <code>void fftwl_plan_with_nthreads(int)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:425</i>
	 */
	void fftwl_plan_with_nthreads(int nthreads);
	/**
	 * Original signature : <code>int fftwl_init_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:427</i>
	 */
	int fftwl_init_threads();
	/**
	 * Original signature : <code>void fftwl_cleanup_threads()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:429</i>
	 */
	void fftwl_cleanup_threads();
	/**
	 * Original signature : <code>int fftwl_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:431</i><br>
	 * @deprecated use the safer methods {@link #fftwl_export_wisdom_to_filename(java.lang.String)} and {@link #fftwl_export_wisdom_to_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwl_export_wisdom_to_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftwl_export_wisdom_to_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:431</i>
	 */
	int fftwl_export_wisdom_to_filename(String filename);
	/**
	 * Original signature : <code>void fftwl_export_wisdom_to_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:433</i>
	 */
	void fftwl_export_wisdom_to_file(FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>char* fftwl_export_wisdom_to_string()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:435</i>
	 */
	Pointer fftwl_export_wisdom_to_string();
	/**
	 * Original signature : <code>void fftwl_export_wisdom(fftwl_write_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:437</i>
	 */
	void fftwl_export_wisdom(FFTW3Library.fftw_write_char_func_do_not_use_me write_char, Pointer data);
	/**
	 * Original signature : <code>int fftwl_import_system_wisdom()</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:439</i>
	 */
	int fftwl_import_system_wisdom();
	/**
	 * Original signature : <code>int fftwl_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:441</i><br>
	 * @deprecated use the safer methods {@link #fftwl_import_wisdom_from_filename(java.lang.String)} and {@link #fftwl_import_wisdom_from_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwl_import_wisdom_from_filename(Pointer filename);
	/**
	 * Original signature : <code>int fftwl_import_wisdom_from_filename(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:441</i>
	 */
	int fftwl_import_wisdom_from_filename(String filename);
	/**
	 * Original signature : <code>int fftwl_import_wisdom_from_file(FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:443</i>
	 */
	int fftwl_import_wisdom_from_file(FFTW3Library.FILE input_file);
	/**
	 * Original signature : <code>int fftwl_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:445</i><br>
	 * @deprecated use the safer methods {@link #fftwl_import_wisdom_from_string(java.lang.String)} and {@link #fftwl_import_wisdom_from_string(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int fftwl_import_wisdom_from_string(Pointer input_string);
	/**
	 * Original signature : <code>int fftwl_import_wisdom_from_string(const char*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:445</i>
	 */
	int fftwl_import_wisdom_from_string(String input_string);
	/**
	 * Original signature : <code>int fftwl_import_wisdom(fftwl_read_char_func, void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:447</i>
	 */
	int fftwl_import_wisdom(FFTW3Library.fftw_read_char_func_do_not_use_me read_char, Pointer data);
	/**
	 * Original signature : <code>void fftwl_fprint_plan(const fftwl_plan, FILE*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:449</i>
	 */
	void fftwl_fprint_plan(FFTW3Library.fftwl_plan p, FFTW3Library.FILE output_file);
	/**
	 * Original signature : <code>void fftwl_print_plan(const fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:451</i>
	 */
	void fftwl_print_plan(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>char* fftwl_sprint_plan(const fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:453</i>
	 */
	Pointer fftwl_sprint_plan(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>void* fftwl_malloc(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:455</i>
	 */
	Pointer fftwl_malloc(NativeLong n);
	/**
	 * Original signature : <code>long double* fftwl_alloc_real(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:457</i>
	 */
	DoubleByReference fftwl_alloc_real(NativeLong n);
	/**
	 * Original signature : <code>fftwl_complex* fftwl_alloc_complex(size_t)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:459</i>
	 */
	double[] fftwl_alloc_complex(NativeLong n);
	/**
	 * Original signature : <code>void fftwl_free(void*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:461</i>
	 */
	void fftwl_free(Pointer p);
	/**
	 * Original signature : <code>void fftwl_flops(const fftwl_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:463</i><br>
	 * @deprecated use the safer methods {@link #fftwl_flops(fftw3.FFTW3Library.fftwl_plan, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #fftwl_flops(fftw3.FFTW3Library.fftwl_plan, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void fftwl_flops(FFTW3Library.fftwl_plan p, DoubleByReference add, DoubleByReference mul, DoubleByReference fmas);
	/**
	 * Original signature : <code>void fftwl_flops(const fftwl_plan, double*, double*, double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:463</i>
	 */
	void fftwl_flops(FFTW3Library.fftwl_plan p, DoubleBuffer add, DoubleBuffer mul, DoubleBuffer fmas);
	/**
	 * Original signature : <code>double fftwl_estimate_cost(const fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:465</i>
	 */
	double fftwl_estimate_cost(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>double fftwl_cost(const fftwl_plan)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:467</i>
	 */
	double fftwl_cost(FFTW3Library.fftwl_plan p);
	/**
	 * Original signature : <code>int fftwl_alignment_of(long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:469</i><br>
	 * @deprecated use the safer methods {@link #fftwl_alignment_of(java.nio.DoubleBuffer)} and {@link #fftwl_alignment_of(com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int fftwl_alignment_of(DoubleByReference p);
	/**
	 * Original signature : <code>int fftwl_alignment_of(long double*)</code><br>
	 * <i>native declaration : /usr/local/include/fftw3.h:469</i>
	 */
	int fftwl_alignment_of(DoubleBuffer p);
	public static final class fftw_version {
		private static Pointer fftw_version;
		public static synchronized Pointer get() {
			if (fftw_version == null) 
				fftw_version = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftw_version");
			return fftw_version;
		}
	};
	public static final class fftw_cc {
		private static Pointer fftw_cc;
		public static synchronized Pointer get() {
			if (fftw_cc == null) 
				fftw_cc = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftw_cc");
			return fftw_cc;
		}
	};
	public static final class fftw_codelet_optim {
		private static Pointer fftw_codelet_optim;
		public static synchronized Pointer get() {
			if (fftw_codelet_optim == null) 
				fftw_codelet_optim = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftw_codelet_optim");
			return fftw_codelet_optim;
		}
	};
	public static final class fftwf_version {
		private static Pointer fftwf_version;
		public static synchronized Pointer get() {
			if (fftwf_version == null) 
				fftwf_version = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwf_version");
			return fftwf_version;
		}
	};
	public static final class fftwf_cc {
		private static Pointer fftwf_cc;
		public static synchronized Pointer get() {
			if (fftwf_cc == null) 
				fftwf_cc = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwf_cc");
			return fftwf_cc;
		}
	};
	public static final class fftwf_codelet_optim {
		private static Pointer fftwf_codelet_optim;
		public static synchronized Pointer get() {
			if (fftwf_codelet_optim == null) 
				fftwf_codelet_optim = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwf_codelet_optim");
			return fftwf_codelet_optim;
		}
	};
	public static final class fftwl_version {
		private static Pointer fftwl_version;
		public static synchronized Pointer get() {
			if (fftwl_version == null) 
				fftwl_version = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwl_version");
			return fftwl_version;
		}
	};
	public static final class fftwl_cc {
		private static Pointer fftwl_cc;
		public static synchronized Pointer get() {
			if (fftwl_cc == null) 
				fftwl_cc = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwl_cc");
			return fftwl_cc;
		}
	};
	public static final class fftwl_codelet_optim {
		private static Pointer fftwl_codelet_optim;
		public static synchronized Pointer get() {
			if (fftwl_codelet_optim == null) 
				fftwl_codelet_optim = FFTW3Library.JNA_NATIVE_LIB.getGlobalVariableAddress("fftwl_codelet_optim");
			return fftwl_codelet_optim;
		}
	};
	public static class fftwf_plan extends PointerType {
		public fftwf_plan(Pointer address) {
			super(address);
		}
		public fftwf_plan() {
			super();
		}
	};
	public static class fftw_plan extends PointerType {
		public fftw_plan(Pointer address) {
			super(address);
		}
		public fftw_plan() {
			super();
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
	public static class fftwl_plan extends PointerType {
		public fftwl_plan(Pointer address) {
			super(address);
		}
		public fftwl_plan() {
			super();
		}
	};
}
